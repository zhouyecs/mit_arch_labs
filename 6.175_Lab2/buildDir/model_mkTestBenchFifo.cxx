/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sun Mar 10 13:59:00 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTestBenchFifo.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTestBenchFifo::MODEL_mkTestBenchFifo()
{
  mkTestBenchFifo_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTestBenchFifo()
{
  MODEL_mkTestBenchFifo *model = new MODEL_mkTestBenchFifo();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTestBenchFifo &INST_top = *((MOD_mkTestBenchFifo *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_testFifo_d_2_BIT_32_0_1_AND_randomVal1_ini_ETC___d14;
	 tUInt8 DEF_INST_top_DEF_enqueue3_8_EQ_0___d19;
	 tUInt8 DEF_INST_top_DEF_success__h1985;
	 tUInt8 DEF_INST_top_DEF_randomVal1_initialized__h749;
	 tUInt8 DEF_INST_top_DEF_init___d7;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every_1;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every_1;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_initialize;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_initialize;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_feed;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_feed;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_stream;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_stream;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_presucces;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_presucces;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_finish;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_finish;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_enqueueThree;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_enqueueThree;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dequeueThree;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dequeueThree;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_deadlock;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_deadlock;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_timeout;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_timeout;
	 DEF_INST_top_DEF_init___d7 = INST_top.INST_init.METH_read();
	 INST_top.DEF_x__h2454 = INST_top.INST_delay.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_deadlock = (INST_top.DEF_x__h2454) == 200u && DEF_INST_top_DEF_init___d7;
	 DEF_INST_top_DEF_WILL_FIRE_RL_deadlock = DEF_INST_top_DEF_CAN_FIRE_RL_deadlock;
	 INST_top.DEF_x__h2340 = INST_top.INST_enqueue3.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_dequeueThree = (INST_top.DEF_x__h2340) == 4u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_dequeueThree = DEF_INST_top_DEF_CAN_FIRE_RL_dequeueThree;
	 INST_top.DEF_testFifo_d_2___d9 = INST_top.INST_testFifo_d_2.METH_read();
	 DEF_INST_top_DEF_randomVal1_initialized__h749 = INST_top.INST_randomVal1_initialized.METH_read();
	 INST_top.DEF_testFifo_d_2_BIT_32___d10 = (tUInt8)((INST_top.DEF_testFifo_d_2___d9) >> 32u);
	 DEF_INST_top_DEF_enqueue3_8_EQ_0___d19 = (INST_top.DEF_x__h2340) == 0u;
	 DEF_INST_top_DEF_NOT_testFifo_d_2_BIT_32_0_1_AND_randomVal1_ini_ETC___d14 = !(INST_top.DEF_testFifo_d_2_BIT_32___d10) && (DEF_INST_top_DEF_randomVal1_initialized__h749 && INST_top.INST_referenceFifo_bsfif.METH_i_notFull());
	 DEF_INST_top_DEF_CAN_FIRE_RL_enqueueThree = DEF_INST_top_DEF_NOT_testFifo_d_2_BIT_32_0_1_AND_randomVal1_ini_ETC___d14 && (!DEF_INST_top_DEF_enqueue3_8_EQ_0___d19 && (INST_top.DEF_x__h2340) < 4u);
	 DEF_INST_top_DEF_WILL_FIRE_RL_enqueueThree = DEF_INST_top_DEF_CAN_FIRE_RL_enqueueThree;
	 INST_top.DEF_x__h2192 = INST_top.INST_feed_count.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_feed = DEF_INST_top_DEF_NOT_testFifo_d_2_BIT_32_0_1_AND_randomVal1_ini_ETC___d14 && (((INST_top.DEF_x__h2192) < (tUInt8)128u && DEF_INST_top_DEF_init___d7) && DEF_INST_top_DEF_enqueue3_8_EQ_0___d19);
	 DEF_INST_top_DEF_WILL_FIRE_RL_feed = DEF_INST_top_DEF_CAN_FIRE_RL_feed;
	 DEF_INST_top_DEF_CAN_FIRE_RL_initialize = !DEF_INST_top_DEF_init___d7;
	 DEF_INST_top_DEF_WILL_FIRE_RL_initialize = DEF_INST_top_DEF_CAN_FIRE_RL_initialize;
	 INST_top.DEF_x__h1986 = INST_top.INST_stream_count.METH_read();
	 DEF_INST_top_DEF_success__h1985 = INST_top.INST_success.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_finish = DEF_INST_top_DEF_success__h1985 && (INST_top.DEF_x__h1986) == (tUInt8)132u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_finish = DEF_INST_top_DEF_CAN_FIRE_RL_finish;
	 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every = DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every;
	 DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every_1 = !DEF_INST_top_DEF_randomVal1_initialized__h749;
	 DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every_1 = DEF_INST_top_DEF_CAN_FIRE_RL_randomVal1_every_1;
	 INST_top.DEF_testFifo_d_0___d23 = INST_top.INST_testFifo_d_0.METH_read();
	 INST_top.DEF_testFifo_d_0_3_BIT_32___d24 = (tUInt8)((INST_top.DEF_testFifo_d_0___d23) >> 32u);
	 DEF_INST_top_DEF_CAN_FIRE_RL_stream = (INST_top.DEF_testFifo_d_0_3_BIT_32___d24 && INST_top.INST_referenceFifo_bsfif.METH_i_notEmpty()) && (DEF_INST_top_DEF_init___d7 && DEF_INST_top_DEF_enqueue3_8_EQ_0___d19);
	 DEF_INST_top_DEF_WILL_FIRE_RL_stream = DEF_INST_top_DEF_CAN_FIRE_RL_stream && !DEF_INST_top_DEF_WILL_FIRE_RL_feed;
	 DEF_INST_top_DEF_CAN_FIRE_RL_presucces = (INST_top.DEF_x__h1986) == (tUInt8)128u && DEF_INST_top_DEF_init___d7;
	 DEF_INST_top_DEF_WILL_FIRE_RL_presucces = DEF_INST_top_DEF_CAN_FIRE_RL_presucces && !DEF_INST_top_DEF_WILL_FIRE_RL_stream;
	 DEF_INST_top_DEF_CAN_FIRE_RL_timeout = DEF_INST_top_DEF_init___d7;
	 DEF_INST_top_DEF_WILL_FIRE_RL_timeout = DEF_INST_top_DEF_CAN_FIRE_RL_timeout;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_finish)
	   INST_top.RL_finish();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dequeueThree)
	   INST_top.RL_dequeueThree();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_deadlock)
	   INST_top.RL_deadlock();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_timeout)
	   INST_top.RL_timeout();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_stream)
	   INST_top.RL_stream();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every)
	   INST_top.RL_randomVal1_every();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_enqueueThree)
	   INST_top.RL_enqueueThree();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_feed)
	   INST_top.RL_feed();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_presucces)
	   INST_top.RL_presucces();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_randomVal1_every_1)
	   INST_top.RL_randomVal1_every_1();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_initialize)
	   INST_top.RL_initialize();
	 INST_top.INST_randomVal1_zaz.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_randomVal1_ignore.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_referenceFifo_bsfif.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_testFifo_d_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_testFifo_d_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_testFifo_d_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_randomVal1_initialized.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_init.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_cycle_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_delay.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_stream_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_feed_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_enqueue3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_success.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTestBenchFifo::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTestBenchFifo_instance = new MOD_mkTestBenchFifo(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTestBenchFifo_instance->INST_referenceFifo_bsfif.set_clk_0)("CLK");
  (mkTestBenchFifo_instance->INST_randomVal1_ignore.set_clk_0)("CLK");
  (mkTestBenchFifo_instance->INST_randomVal1_zaz.set_clk_0)("CLK");
  (mkTestBenchFifo_instance->set_clk_0)("CLK");
}
void MODEL_mkTestBenchFifo::destroy_model()
{
  delete mkTestBenchFifo_instance;
  mkTestBenchFifo_instance = NULL;
}
void MODEL_mkTestBenchFifo::reset_model(bool asserted)
{
  (mkTestBenchFifo_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTestBenchFifo::get_instance()
{
  return mkTestBenchFifo_instance;
}

/* Fill in version numbers */
void MODEL_mkTestBenchFifo::get_version(unsigned int *year,
					unsigned int *month,
					char const **annotation,
					char const **build)
{
  *year = 0u;
  *month = 0u;
  *annotation = NULL;
  *build = "14ff62d";
}

/* Get the model creation time */
time_t MODEL_mkTestBenchFifo::get_creation_time()
{
  
  /* Sun Mar 10 05:59:00 UTC 2024 */
  return 1710050340llu;
}

/* State dumping function */
void MODEL_mkTestBenchFifo::dump_state()
{
  (mkTestBenchFifo_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTestBenchFifo & mkTestBenchFifo_backing(tSimStateHdl simHdl)
{
  static MOD_mkTestBenchFifo *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTestBenchFifo(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTestBenchFifo::dump_VCD_defs()
{
  (mkTestBenchFifo_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTestBenchFifo::dump_VCD(tVCDDumpType dt)
{
  (mkTestBenchFifo_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTestBenchFifo_backing(sim_hdl));
}
