/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Sun Mar 10 13:59:00 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestBenchFifo.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("Dequeue", 7u);
static std::string const __str_literal_7("Enqueued three in a row", 23u);
static std::string const __str_literal_1("Enqueuing %d in the tested fifo and the reference fifo",
					 54u);
static std::string const __str_literal_6("Enqueuing three %d in the tested fifo and the reference fifo",
					 60u);
static std::string const __str_literal_8("FAILED It seems that your fifo is deadlocking, either we are failing to enqueue, or we enqueud some stuff in it but we can't dequeue from it.",
					 141u);
static std::string const __str_literal_3("FAILED: We see %d in the reference fifo and %d in your fifo",
					 59u);
static std::string const __str_literal_4("On the path to success", 22u);
static std::string const __str_literal_5("PASSED", 6u);


/* Constructor */
MOD_mkTestBenchFifo::MOD_mkTestBenchFifo(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle_count(simHdl, "cycle_count", this, 32u, 0u, (tUInt8)0u),
    INST_delay(simHdl, "delay", this, 32u, 0u, (tUInt8)0u),
    INST_enqueue3(simHdl, "enqueue3", this, 32u, 0u, (tUInt8)0u),
    INST_feed_count(simHdl, "feed_count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_init(simHdl, "init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal1_ignore(simHdl, "randomVal1_ignore", this, 32u, (tUInt8)0u),
    INST_randomVal1_initialized(simHdl, "randomVal1_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal1_zaz(simHdl, "randomVal1_zaz", this, 32u, (tUInt8)0u),
    INST_referenceFifo_bsfif(simHdl, "referenceFifo_bsfif", this, 32u, 3u, 1u, 0u),
    INST_stream_count(simHdl, "stream_count", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_success(simHdl, "success", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testFifo_d_0(simHdl, "testFifo_d_0", this, 33u, 2863311530llu, (tUInt8)0u),
    INST_testFifo_d_1(simHdl, "testFifo_d_1", this, 33u, 2863311530llu, (tUInt8)0u),
    INST_testFifo_d_2(simHdl, "testFifo_d_2", this, 33u, 2863311530llu, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_new_value__h716(2863311530u)
{
  symbol_count = 29u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestBenchFifo::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle_count", SYM_MODULE, &INST_cycle_count);
  init_symbol(&symbols[1u], "delay", SYM_MODULE, &INST_delay);
  init_symbol(&symbols[2u], "enqueue3", SYM_MODULE, &INST_enqueue3);
  init_symbol(&symbols[3u], "feed_count", SYM_MODULE, &INST_feed_count);
  init_symbol(&symbols[4u], "init", SYM_MODULE, &INST_init);
  init_symbol(&symbols[5u], "RL_deadlock", SYM_RULE);
  init_symbol(&symbols[6u], "RL_dequeueThree", SYM_RULE);
  init_symbol(&symbols[7u], "RL_enqueueThree", SYM_RULE);
  init_symbol(&symbols[8u], "RL_feed", SYM_RULE);
  init_symbol(&symbols[9u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[10u], "RL_initialize", SYM_RULE);
  init_symbol(&symbols[11u], "RL_presucces", SYM_RULE);
  init_symbol(&symbols[12u], "RL_randomVal1_every", SYM_RULE);
  init_symbol(&symbols[13u], "RL_randomVal1_every_1", SYM_RULE);
  init_symbol(&symbols[14u], "RL_stream", SYM_RULE);
  init_symbol(&symbols[15u], "RL_timeout", SYM_RULE);
  init_symbol(&symbols[16u], "randomVal1_ignore", SYM_MODULE, &INST_randomVal1_ignore);
  init_symbol(&symbols[17u], "randomVal1_initialized", SYM_MODULE, &INST_randomVal1_initialized);
  init_symbol(&symbols[18u], "randomVal1_zaz", SYM_MODULE, &INST_randomVal1_zaz);
  init_symbol(&symbols[19u], "referenceFifo_bsfif", SYM_MODULE, &INST_referenceFifo_bsfif);
  init_symbol(&symbols[20u], "stream_count", SYM_MODULE, &INST_stream_count);
  init_symbol(&symbols[21u], "success", SYM_MODULE, &INST_success);
  init_symbol(&symbols[22u], "testFifo_d_0", SYM_MODULE, &INST_testFifo_d_0);
  init_symbol(&symbols[23u], "testFifo_d_1", SYM_MODULE, &INST_testFifo_d_1);
  init_symbol(&symbols[24u], "testFifo_d_2", SYM_MODULE, &INST_testFifo_d_2);
  init_symbol(&symbols[25u], "x__h1986", SYM_DEF, &DEF_x__h1986, 8u);
  init_symbol(&symbols[26u], "x__h2192", SYM_DEF, &DEF_x__h2192, 8u);
  init_symbol(&symbols[27u], "x__h2340", SYM_DEF, &DEF_x__h2340, 32u);
  init_symbol(&symbols[28u], "x__h2454", SYM_DEF, &DEF_x__h2454, 32u);
}


/* Rule actions */

void MOD_mkTestBenchFifo::RL_randomVal1_every()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    rand32();
    DEF_new_value__h716 = rand32();
  }
  INST_randomVal1_zaz.METH_wset(DEF_new_value__h716);
}

void MOD_mkTestBenchFifo::RL_randomVal1_every_1()
{
  DEF_x_wget__h580 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h755 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h580 : 0u;
  INST_randomVal1_ignore.METH_wset(DEF_v__h755);
}

void MOD_mkTestBenchFifo::RL_initialize()
{
  INST_randomVal1_initialized.METH_write((tUInt8)1u);
  INST_init.METH_write((tUInt8)1u);
}

void MOD_mkTestBenchFifo::RL_feed()
{
  DEF_testFifo_d_1___d25 = INST_testFifo_d_1.METH_read();
  DEF_testFifo_d_1_5_BIT_32___d26 = (tUInt8)(DEF_testFifo_d_1___d25 >> 32u);
  DEF_testFifo_d_0___d23 = INST_testFifo_d_0.METH_read();
  DEF_x_wget__h580 = INST_randomVal1_zaz.METH_wget();
  DEF_x__h2192 = INST_feed_count.METH_read();
  DEF_testFifo_d_0_3_BIT_32___d24 = (tUInt8)(DEF_testFifo_d_0___d23 >> 32u);
  DEF_v__h755 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h580 : 0u;
  DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28 = 8589934591llu & ((((tUInt64)((tUInt8)1u)) << 32u) | (tUInt64)(DEF_v__h755));
  DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30 = DEF_testFifo_d_0_3_BIT_32___d24 && !DEF_testFifo_d_1_5_BIT_32___d26;
  DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27 = DEF_testFifo_d_0_3_BIT_32___d24 && DEF_testFifo_d_1_5_BIT_32___d26;
  DEF_x__h2182 = (tUInt8)255u & (DEF_x__h2192 + (tUInt8)1u);
  DEF_NOT_testFifo_d_0_3_BIT_32_4___d31 = !DEF_testFifo_d_0_3_BIT_32___d24;
  INST_referenceFifo_bsfif.METH_enq(DEF_v__h755);
  INST_feed_count.METH_write(DEF_x__h2182);
  if (DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27)
    INST_testFifo_d_2.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30)
    INST_testFifo_d_1.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (DEF_NOT_testFifo_d_0_3_BIT_32_4___d31)
    INST_testFifo_d_0.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_v__h755);
}

void MOD_mkTestBenchFifo::RL_stream()
{
  tUInt8 DEF_NOT_IF_testFifo_d_0_3_BIT_32_4_THEN_testFifo_d_ETC___d49;
  tUInt64 DEF_testFifo_d_2_BIT_32_0_CONCAT_IF_testFifo_d_2_B_ETC___d41;
  tUInt64 DEF_testFifo_d_1_5_BIT_32_6_CONCAT_IF_testFifo_d_1_ETC___d38;
  tUInt64 DEF__0_CONCAT_DONTCARE___d42;
  tUInt32 DEF_t__h1830;
  tUInt32 DEF_r__h1829;
  DEF_testFifo_d_2___d9 = INST_testFifo_d_2.METH_read();
  DEF_testFifo_d_1___d25 = INST_testFifo_d_1.METH_read();
  DEF_testFifo_d_1_5_BIT_32___d26 = (tUInt8)(DEF_testFifo_d_1___d25 >> 32u);
  DEF_testFifo_d_0___d23 = INST_testFifo_d_0.METH_read();
  DEF_x__h1986 = INST_stream_count.METH_read();
  DEF_r__h1829 = INST_referenceFifo_bsfif.METH_first();
  DEF_testFifo_d_2_BIT_32___d10 = (tUInt8)(DEF_testFifo_d_2___d9 >> 32u);
  DEF_t__h1830 = (tUInt32)(DEF_testFifo_d_0___d23);
  DEF__0_CONCAT_DONTCARE___d42 = 2863311530llu;
  DEF_testFifo_d_1_5_BIT_32_6_CONCAT_IF_testFifo_d_1_ETC___d38 = 8589934591llu & ((((tUInt64)(DEF_testFifo_d_1_5_BIT_32___d26)) << 32u) | (tUInt64)((tUInt32)(DEF_testFifo_d_1___d25)));
  DEF_testFifo_d_2_BIT_32_0_CONCAT_IF_testFifo_d_2_B_ETC___d41 = 8589934591llu & ((((tUInt64)(DEF_testFifo_d_2_BIT_32___d10)) << 32u) | (tUInt64)((tUInt32)(DEF_testFifo_d_2___d9)));
  DEF_NOT_IF_testFifo_d_0_3_BIT_32_4_THEN_testFifo_d_ETC___d49 = !(DEF_t__h1830 == DEF_r__h1829);
  INST_delay.METH_write(0u);
  DEF_x__h1974 = (tUInt8)255u & (DEF_x__h1986 + (tUInt8)1u);
  INST_testFifo_d_0.METH_write(DEF_testFifo_d_1_5_BIT_32_6_CONCAT_IF_testFifo_d_1_ETC___d38);
  if (DEF_testFifo_d_1_5_BIT_32___d26)
    INST_testFifo_d_2.METH_write(DEF__0_CONCAT_DONTCARE___d42);
  if (DEF_testFifo_d_1_5_BIT_32___d26)
    INST_testFifo_d_1.METH_write(DEF_testFifo_d_2_BIT_32_0_CONCAT_IF_testFifo_d_2_B_ETC___d41);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  INST_stream_count.METH_write(DEF_x__h1974);
  INST_referenceFifo_bsfif.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_IF_testFifo_d_0_3_BIT_32_4_THEN_testFifo_d_ETC___d49)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_3, DEF_r__h1829, DEF_t__h1830);
    if (DEF_NOT_IF_testFifo_d_0_3_BIT_32_4_THEN_testFifo_d_ETC___d49)
      dollar_finish(sim_hdl, "32", 1u);
  }
}

void MOD_mkTestBenchFifo::RL_presucces()
{
  DEF_x__h1986 = INST_stream_count.METH_read();
  DEF_x__h1974 = (tUInt8)255u & (DEF_x__h1986 + (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
  INST_enqueue3.METH_write(1u);
  INST_stream_count.METH_write(DEF_x__h1974);
}

void MOD_mkTestBenchFifo::RL_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_5);
    dollar_finish(sim_hdl, "32", 1u);
  }
}

void MOD_mkTestBenchFifo::RL_enqueueThree()
{
  tUInt32 DEF_x__h2073;
  DEF_testFifo_d_1___d25 = INST_testFifo_d_1.METH_read();
  DEF_testFifo_d_1_5_BIT_32___d26 = (tUInt8)(DEF_testFifo_d_1___d25 >> 32u);
  DEF_testFifo_d_0___d23 = INST_testFifo_d_0.METH_read();
  DEF_x_wget__h580 = INST_randomVal1_zaz.METH_wget();
  DEF_x__h2192 = INST_feed_count.METH_read();
  DEF_x__h2340 = INST_enqueue3.METH_read();
  DEF_testFifo_d_0_3_BIT_32___d24 = (tUInt8)(DEF_testFifo_d_0___d23 >> 32u);
  DEF_v__h755 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h580 : 0u;
  DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28 = 8589934591llu & ((((tUInt64)((tUInt8)1u)) << 32u) | (tUInt64)(DEF_v__h755));
  DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30 = DEF_testFifo_d_0_3_BIT_32___d24 && !DEF_testFifo_d_1_5_BIT_32___d26;
  DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27 = DEF_testFifo_d_0_3_BIT_32___d24 && DEF_testFifo_d_1_5_BIT_32___d26;
  DEF_NOT_testFifo_d_0_3_BIT_32_4___d31 = !DEF_testFifo_d_0_3_BIT_32___d24;
  DEF_x__h2182 = (tUInt8)255u & (DEF_x__h2192 + (tUInt8)1u);
  DEF_x__h2073 = DEF_x__h2340 + 1u;
  INST_delay.METH_write(0u);
  INST_enqueue3.METH_write(DEF_x__h2073);
  INST_referenceFifo_bsfif.METH_enq(DEF_v__h755);
  INST_feed_count.METH_write(DEF_x__h2182);
  if (DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27)
    INST_testFifo_d_2.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30)
    INST_testFifo_d_1.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (DEF_NOT_testFifo_d_0_3_BIT_32_4___d31)
    INST_testFifo_d_0.METH_write(DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_6, DEF_v__h755);
}

void MOD_mkTestBenchFifo::RL_dequeueThree()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_7);
  INST_enqueue3.METH_write(0u);
  INST_success.METH_write((tUInt8)1u);
}

void MOD_mkTestBenchFifo::RL_deadlock()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_8);
    dollar_finish(sim_hdl, "32", 1u);
  }
}

void MOD_mkTestBenchFifo::RL_timeout()
{
  tUInt32 DEF_x__h2444;
  tUInt32 DEF_x__h2458;
  tUInt32 DEF_x__h2462;
  DEF_x__h2454 = INST_delay.METH_read();
  DEF_x__h2462 = INST_cycle_count.METH_read();
  DEF_x__h2458 = DEF_x__h2462 + 1u;
  DEF_x__h2444 = DEF_x__h2454 + 1u;
  INST_delay.METH_write(DEF_x__h2444);
  INST_cycle_count.METH_write(DEF_x__h2458);
}


/* Methods */


/* Reset routines */

void MOD_mkTestBenchFifo::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_testFifo_d_2.reset_RST(ARG_rst_in);
  INST_testFifo_d_1.reset_RST(ARG_rst_in);
  INST_testFifo_d_0.reset_RST(ARG_rst_in);
  INST_success.reset_RST(ARG_rst_in);
  INST_stream_count.reset_RST(ARG_rst_in);
  INST_referenceFifo_bsfif.reset_RST(ARG_rst_in);
  INST_randomVal1_initialized.reset_RST(ARG_rst_in);
  INST_init.reset_RST(ARG_rst_in);
  INST_feed_count.reset_RST(ARG_rst_in);
  INST_enqueue3.reset_RST(ARG_rst_in);
  INST_delay.reset_RST(ARG_rst_in);
  INST_cycle_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestBenchFifo::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestBenchFifo::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle_count.dump_state(indent + 2u);
  INST_delay.dump_state(indent + 2u);
  INST_enqueue3.dump_state(indent + 2u);
  INST_feed_count.dump_state(indent + 2u);
  INST_init.dump_state(indent + 2u);
  INST_randomVal1_ignore.dump_state(indent + 2u);
  INST_randomVal1_initialized.dump_state(indent + 2u);
  INST_randomVal1_zaz.dump_state(indent + 2u);
  INST_referenceFifo_bsfif.dump_state(indent + 2u);
  INST_stream_count.dump_state(indent + 2u);
  INST_success.dump_state(indent + 2u);
  INST_testFifo_d_0.dump_state(indent + 2u);
  INST_testFifo_d_1.dump_state(indent + 2u);
  INST_testFifo_d_2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestBenchFifo::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 34u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_testFifo_d_0_3_BIT_32_4___d31", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "new_value__h716", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_0_3_BIT_32___d24", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_0___d23", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_1_5_BIT_32___d26", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_1___d25", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_2_BIT_32___d10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "testFifo_d_2___d9", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h755", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1974", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1986", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2182", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2192", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2340", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2454", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h580", 32u);
  num = INST_cycle_count.dump_VCD_defs(num);
  num = INST_delay.dump_VCD_defs(num);
  num = INST_enqueue3.dump_VCD_defs(num);
  num = INST_feed_count.dump_VCD_defs(num);
  num = INST_init.dump_VCD_defs(num);
  num = INST_randomVal1_ignore.dump_VCD_defs(num);
  num = INST_randomVal1_initialized.dump_VCD_defs(num);
  num = INST_randomVal1_zaz.dump_VCD_defs(num);
  num = INST_referenceFifo_bsfif.dump_VCD_defs(num);
  num = INST_stream_count.dump_VCD_defs(num);
  num = INST_success.dump_VCD_defs(num);
  num = INST_testFifo_d_0.dump_VCD_defs(num);
  num = INST_testFifo_d_1.dump_VCD_defs(num);
  num = INST_testFifo_d_2.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestBenchFifo::dump_VCD(tVCDDumpType dt,
				   unsigned int levels,
				   MOD_mkTestBenchFifo &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestBenchFifo::vcd_defs(tVCDDumpType dt, MOD_mkTestBenchFifo &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_testFifo_d_0_3_BIT_32_4___d31) != DEF_NOT_testFifo_d_0_3_BIT_32_4___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_testFifo_d_0_3_BIT_32_4___d31, 1u);
	backing.DEF_NOT_testFifo_d_0_3_BIT_32_4___d31 = DEF_NOT_testFifo_d_0_3_BIT_32_4___d31;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28) != DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28)
      {
	vcd_write_val(sim_hdl, num, DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28, 33u);
	backing.DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28 = DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28;
      }
      ++num;
      if ((backing.DEF_new_value__h716) != DEF_new_value__h716)
      {
	vcd_write_val(sim_hdl, num, DEF_new_value__h716, 32u);
	backing.DEF_new_value__h716 = DEF_new_value__h716;
      }
      ++num;
      if ((backing.DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30) != DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30, 1u);
	backing.DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30 = DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30;
      }
      ++num;
      if ((backing.DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27) != DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27, 1u);
	backing.DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27 = DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27;
      }
      ++num;
      if ((backing.DEF_testFifo_d_0_3_BIT_32___d24) != DEF_testFifo_d_0_3_BIT_32___d24)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_0_3_BIT_32___d24, 1u);
	backing.DEF_testFifo_d_0_3_BIT_32___d24 = DEF_testFifo_d_0_3_BIT_32___d24;
      }
      ++num;
      if ((backing.DEF_testFifo_d_0___d23) != DEF_testFifo_d_0___d23)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_0___d23, 33u);
	backing.DEF_testFifo_d_0___d23 = DEF_testFifo_d_0___d23;
      }
      ++num;
      if ((backing.DEF_testFifo_d_1_5_BIT_32___d26) != DEF_testFifo_d_1_5_BIT_32___d26)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_1_5_BIT_32___d26, 1u);
	backing.DEF_testFifo_d_1_5_BIT_32___d26 = DEF_testFifo_d_1_5_BIT_32___d26;
      }
      ++num;
      if ((backing.DEF_testFifo_d_1___d25) != DEF_testFifo_d_1___d25)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_1___d25, 33u);
	backing.DEF_testFifo_d_1___d25 = DEF_testFifo_d_1___d25;
      }
      ++num;
      if ((backing.DEF_testFifo_d_2_BIT_32___d10) != DEF_testFifo_d_2_BIT_32___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_2_BIT_32___d10, 1u);
	backing.DEF_testFifo_d_2_BIT_32___d10 = DEF_testFifo_d_2_BIT_32___d10;
      }
      ++num;
      if ((backing.DEF_testFifo_d_2___d9) != DEF_testFifo_d_2___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_testFifo_d_2___d9, 33u);
	backing.DEF_testFifo_d_2___d9 = DEF_testFifo_d_2___d9;
      }
      ++num;
      if ((backing.DEF_v__h755) != DEF_v__h755)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h755, 32u);
	backing.DEF_v__h755 = DEF_v__h755;
      }
      ++num;
      if ((backing.DEF_x__h1974) != DEF_x__h1974)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1974, 8u);
	backing.DEF_x__h1974 = DEF_x__h1974;
      }
      ++num;
      if ((backing.DEF_x__h1986) != DEF_x__h1986)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1986, 8u);
	backing.DEF_x__h1986 = DEF_x__h1986;
      }
      ++num;
      if ((backing.DEF_x__h2182) != DEF_x__h2182)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2182, 8u);
	backing.DEF_x__h2182 = DEF_x__h2182;
      }
      ++num;
      if ((backing.DEF_x__h2192) != DEF_x__h2192)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2192, 8u);
	backing.DEF_x__h2192 = DEF_x__h2192;
      }
      ++num;
      if ((backing.DEF_x__h2340) != DEF_x__h2340)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2340, 32u);
	backing.DEF_x__h2340 = DEF_x__h2340;
      }
      ++num;
      if ((backing.DEF_x__h2454) != DEF_x__h2454)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2454, 32u);
	backing.DEF_x__h2454 = DEF_x__h2454;
      }
      ++num;
      if ((backing.DEF_x_wget__h580) != DEF_x_wget__h580)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h580, 32u);
	backing.DEF_x_wget__h580 = DEF_x_wget__h580;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_testFifo_d_0_3_BIT_32_4___d31, 1u);
      backing.DEF_NOT_testFifo_d_0_3_BIT_32_4___d31 = DEF_NOT_testFifo_d_0_3_BIT_32_4___d31;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28, 33u);
      backing.DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28 = DEF__1_CONCAT_IF_randomVal1_zaz_whas_THEN_randomVal_ETC___d28;
      vcd_write_val(sim_hdl, num++, DEF_new_value__h716, 32u);
      backing.DEF_new_value__h716 = DEF_new_value__h716;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30, 1u);
      backing.DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30 = DEF_testFifo_d_0_3_BIT_32_4_AND_NOT_testFifo_d_1_5_ETC___d30;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27, 1u);
      backing.DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27 = DEF_testFifo_d_0_3_BIT_32_4_AND_testFifo_d_1_5_BIT_ETC___d27;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_0_3_BIT_32___d24, 1u);
      backing.DEF_testFifo_d_0_3_BIT_32___d24 = DEF_testFifo_d_0_3_BIT_32___d24;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_0___d23, 33u);
      backing.DEF_testFifo_d_0___d23 = DEF_testFifo_d_0___d23;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_1_5_BIT_32___d26, 1u);
      backing.DEF_testFifo_d_1_5_BIT_32___d26 = DEF_testFifo_d_1_5_BIT_32___d26;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_1___d25, 33u);
      backing.DEF_testFifo_d_1___d25 = DEF_testFifo_d_1___d25;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_2_BIT_32___d10, 1u);
      backing.DEF_testFifo_d_2_BIT_32___d10 = DEF_testFifo_d_2_BIT_32___d10;
      vcd_write_val(sim_hdl, num++, DEF_testFifo_d_2___d9, 33u);
      backing.DEF_testFifo_d_2___d9 = DEF_testFifo_d_2___d9;
      vcd_write_val(sim_hdl, num++, DEF_v__h755, 32u);
      backing.DEF_v__h755 = DEF_v__h755;
      vcd_write_val(sim_hdl, num++, DEF_x__h1974, 8u);
      backing.DEF_x__h1974 = DEF_x__h1974;
      vcd_write_val(sim_hdl, num++, DEF_x__h1986, 8u);
      backing.DEF_x__h1986 = DEF_x__h1986;
      vcd_write_val(sim_hdl, num++, DEF_x__h2182, 8u);
      backing.DEF_x__h2182 = DEF_x__h2182;
      vcd_write_val(sim_hdl, num++, DEF_x__h2192, 8u);
      backing.DEF_x__h2192 = DEF_x__h2192;
      vcd_write_val(sim_hdl, num++, DEF_x__h2340, 32u);
      backing.DEF_x__h2340 = DEF_x__h2340;
      vcd_write_val(sim_hdl, num++, DEF_x__h2454, 32u);
      backing.DEF_x__h2454 = DEF_x__h2454;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h580, 32u);
      backing.DEF_x_wget__h580 = DEF_x_wget__h580;
    }
}

void MOD_mkTestBenchFifo::vcd_prims(tVCDDumpType dt, MOD_mkTestBenchFifo &backing)
{
  INST_cycle_count.dump_VCD(dt, backing.INST_cycle_count);
  INST_delay.dump_VCD(dt, backing.INST_delay);
  INST_enqueue3.dump_VCD(dt, backing.INST_enqueue3);
  INST_feed_count.dump_VCD(dt, backing.INST_feed_count);
  INST_init.dump_VCD(dt, backing.INST_init);
  INST_randomVal1_ignore.dump_VCD(dt, backing.INST_randomVal1_ignore);
  INST_randomVal1_initialized.dump_VCD(dt, backing.INST_randomVal1_initialized);
  INST_randomVal1_zaz.dump_VCD(dt, backing.INST_randomVal1_zaz);
  INST_referenceFifo_bsfif.dump_VCD(dt, backing.INST_referenceFifo_bsfif);
  INST_stream_count.dump_VCD(dt, backing.INST_stream_count);
  INST_success.dump_VCD(dt, backing.INST_success);
  INST_testFifo_d_0.dump_VCD(dt, backing.INST_testFifo_d_0);
  INST_testFifo_d_1.dump_VCD(dt, backing.INST_testFifo_d_1);
  INST_testFifo_d_2.dump_VCD(dt, backing.INST_testFifo_d_2);
}
