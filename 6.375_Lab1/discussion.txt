1. In section 4.3 we asked you to compare the hardware generated for the FIR filter before using
for-loops, and then again after. How does using for-loops in the Bluespec source code change
the hardware the compiler generates for the FIR filter? How has the area and critical-path
delay of your hardware change by using for-loops in Bluespec?

I skip the `make synth`, so I don't know the answer. 
I guess, however, it just change the variable name, and area and critical-path won't be changed.

2. How many lines of code would you have to change in the original filter description without
a for-loop and vectors if we wanted to turn it into a 16 tap FIR filter? How many lines of
code have to change in the version with the for-loop? A 256 tap FIR filter? Comment on
how for-loops can be used to write source code which is more generic and easily reusable in
different situations.

Without a for-loop and vectors, we must add 8 registers and corrosponding add and muliply,
with the for-loop and vectors, we just need to change the size of vector and loop times.

3. After switching your filter to use the multistage multiplier in place of the Verilog * operator,
the builders of the multiplier discover an enhancement they can make to their implementation
of the multiplier. How does your implementation of the filter have to change to accommodate
the new implementation of the multiplier assuming the multiplier interface stays the same?

If the the multiplier interface stays the same, there is no need to change to 
change to accommodate the new implementation of the multiplier.

4. After you successfully changed FIR filter using multi-stage multipliers, how do the area and
critical path delay compare with results from unstatic and statically elaborated Bluespec code
in sections 4.2 and 4.3?

I don't make synth.