/*
 * Generated by Bluespec Compiler (build 14ff62d)
 * 
 * On Thu Apr 25 02:07:26 CST 2024
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkTestDriver_h__
#define __mkTestDriver_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMultiplier.h"


/* Class declaration for the mkTestDriver module */
class MOD_mkTestDriver : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_m_doneread;
  MOD_Reg<tUInt8> INST_m_doneread_double_write_error;
  MOD_Reg<tUInt32> INST_m_in;
  MOD_Reg<tUInt8> INST_m_in_double_write_error;
  MOD_Reg<tUInt8> INST_m_inited;
  MOD_Reg<tUInt8> INST_m_inited_double_write_error;
  MOD_Reg<tUInt32> INST_m_out;
  MOD_Reg<tUInt8> INST_m_out_double_write_error;
  MOD_Counter<tUInt32> INST_m_outstanding;
  MOD_Reg<tUInt8> INST_pipeline_chunker_index;
  MOD_Reg<tUInt8> INST_pipeline_chunker_index_double_write_error;
  MOD_Fifo<tUInt64> INST_pipeline_chunker_infifo;
  MOD_Fifo<tUWide> INST_pipeline_chunker_outfifo;
  MOD_Reg<tUWide> INST_pipeline_chunker_pending;
  MOD_Reg<tUInt8> INST_pipeline_chunker_pending_double_write_error;
  MOD_Fifo<tUWide> INST_pipeline_fft_fft_inputFIFO;
  MOD_Fifo<tUWide> INST_pipeline_fft_fft_outputFIFO;
  MOD_Reg<tUWide> INST_pipeline_fft_fft_stage_data_0;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_data_0_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_fft_fft_stage_data_1;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_data_1_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_fft_fft_stage_data_2;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_data_2_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_fft_fft_stage_data_3;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_data_3_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_0;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_0_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_1;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_1_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_2;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_2_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_3;
  MOD_Reg<tUInt8> INST_pipeline_fft_fft_stage_valid_3_double_write_error;
  MOD_Fifo<tUInt32> INST_pipeline_fir_infifo;
  MOD_mkMultiplier INST_pipeline_fir_m_0;
  MOD_mkMultiplier INST_pipeline_fir_m_1;
  MOD_mkMultiplier INST_pipeline_fir_m_2;
  MOD_mkMultiplier INST_pipeline_fir_m_3;
  MOD_mkMultiplier INST_pipeline_fir_m_4;
  MOD_mkMultiplier INST_pipeline_fir_m_5;
  MOD_mkMultiplier INST_pipeline_fir_m_6;
  MOD_mkMultiplier INST_pipeline_fir_m_7;
  MOD_mkMultiplier INST_pipeline_fir_m_8;
  MOD_Fifo<tUInt32> INST_pipeline_fir_outfifo;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_0;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_0_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_1;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_1_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_2;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_2_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_3;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_3_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_4;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_4_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_5;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_5_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_6;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_6_double_write_error;
  MOD_Reg<tUInt32> INST_pipeline_fir_r_7;
  MOD_Reg<tUInt8> INST_pipeline_fir_r_7_double_write_error;
  MOD_Fifo<tUWide> INST_pipeline_ifft_fft_fft_inputFIFO;
  MOD_Fifo<tUWide> INST_pipeline_ifft_fft_fft_outputFIFO;
  MOD_Reg<tUWide> INST_pipeline_ifft_fft_fft_stage_data_0;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_data_0_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_ifft_fft_fft_stage_data_1;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_data_1_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_ifft_fft_fft_stage_data_2;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_data_2_double_write_error;
  MOD_Reg<tUWide> INST_pipeline_ifft_fft_fft_stage_data_3;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_data_3_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_0;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_0_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_1;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_1_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_2;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_2_double_write_error;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_3;
  MOD_Reg<tUInt8> INST_pipeline_ifft_fft_fft_stage_valid_3_double_write_error;
  MOD_Fifo<tUWide> INST_pipeline_ifft_outfifo;
  MOD_Reg<tUInt8> INST_pipeline_splitter_index;
  MOD_Reg<tUInt8> INST_pipeline_splitter_index_double_write_error;
  MOD_Fifo<tUWide> INST_pipeline_splitter_infifo;
  MOD_Fifo<tUInt64> INST_pipeline_splitter_outfifo;
 
 /* Constructor */
 public:
  MOD_mkTestDriver(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_finish;
  tUInt8 DEF_CAN_FIRE_RL_finish;
  tUInt8 DEF_WILL_FIRE_RL_write;
  tUInt8 DEF_CAN_FIRE_RL_write;
  tUInt8 DEF_WILL_FIRE_RL_pad;
  tUInt8 DEF_CAN_FIRE_RL_pad;
  tUInt8 DEF_WILL_FIRE_RL_read;
  tUInt8 DEF_CAN_FIRE_RL_read;
  tUInt8 DEF_WILL_FIRE_RL_init;
  tUInt8 DEF_CAN_FIRE_RL_init;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_ifft_to_splitter;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_ifft_to_splitter;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_fft_to_ifft;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_fft_to_ifft;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_chunker_to_fft;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_chunker_to_fft;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_fir_to_chunker;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_fir_to_chunker;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_splitter_iterate;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_splitter_iterate;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_ifft_inversify;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_ifft_inversify;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_ifft_fft_fft_linear_fft;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_ifft_fft_fft_linear_fft;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_fft_fft_linear_fft;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_fft_fft_linear_fft;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_chunker_iterate;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_chunker_iterate;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_fir_add;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_fir_add;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_fir_mult;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_fir_mult;
  tUInt8 DEF_x__h7781;
  tUInt8 DEF_pipeline_ifft_fft_fft_stage_valid_3__h625119;
  tUInt8 DEF_pipeline_ifft_fft_fft_stage_valid_2__h518898;
  tUInt8 DEF_pipeline_ifft_fft_fft_stage_valid_1__h420366;
  tUInt8 DEF_pipeline_ifft_fft_fft_stage_valid_0__h321846;
  tUInt8 DEF_pipeline_fft_fft_stage_valid_3__h317867;
  tUInt8 DEF_pipeline_fft_fft_stage_valid_2__h211052;
  tUInt8 DEF_pipeline_fft_fft_stage_valid_1__h111932;
  tUInt8 DEF_pipeline_fft_fft_stage_valid_0__h12384;
  tUInt8 DEF_pipeline_chunker_index_4_EQ_7___d85;
 
 /* Local definitions */
 private:
  tUInt32 DEF_b__h638686;
  tUInt32 DEF_x__h638844;
  tUInt32 DEF_TASK_fopen___d2552;
  tUInt32 DEF_TASK_fopen___d2550;
  tUWide DEF_pipeline_splitter_infifo_first____d2455;
  tUWide DEF_pipeline_ifft_outfifo_first____d2541;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_3__h626297;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_2__h561538;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_1__h459161;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_0__h360635;
  tUWide DEF_pipeline_ifft_fft_fft_outputFIFO_first____d2410;
  tUWide DEF_pipeline_ifft_fft_fft_inputFIFO_first____d1296;
  tUWide DEF_pipeline_fft_fft_stage_data_3__h319045;
  tUWide DEF_pipeline_fft_fft_stage_data_2__h254164;
  tUWide DEF_pipeline_fft_fft_stage_data_1__h151193;
  tUWide DEF_pipeline_fft_fft_stage_data_0__h52079;
  tUWide DEF_pipeline_fft_fft_outputFIFO_first____d2525;
  tUWide DEF_pipeline_fft_fft_inputFIFO_first____d154;
  tUWide DEF_pipeline_chunker_pending__h8705;
  tUWide DEF_pipeline_chunker_outfifo_first____d2509;
  tUInt32 DEF_m_out___d2581;
  tUWide DEF_pipeline_fft_fft_outputFIFO_first__525_BITS_51_ETC___d2537;
  tUWide DEF_pipeline_fft_fft_outputFIFO_first__525_BITS_51_ETC___d2534;
  tUWide DEF_pipeline_chunker_outfifo_first__509_BITS_511_T_ETC___d2521;
  tUWide DEF_pipeline_chunker_outfifo_first__509_BITS_511_T_ETC___d2518;
  tUWide DEF_pipeline_ifft_fft_fft_outputFIFO_first__410_BI_ETC___d2449;
  tUWide DEF_pipeline_ifft_fft_fft_outputFIFO_first__410_BI_ETC___d2439;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_2_987_BITS_44_ETC___d2405;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_2_987_BITS_44_ETC___d2399;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_1_641_BITS_44_ETC___d1986;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_1_641_BITS_44_ETC___d1980;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_0_297_BITS_44_ETC___d1640;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_0_297_BITS_44_ETC___d1634;
  tUWide DEF_pipeline_fft_fft_stage_data_2_45_BITS_447_TO_4_ETC___d1263;
  tUWide DEF_pipeline_fft_fft_stage_data_2_45_BITS_447_TO_4_ETC___d1257;
  tUWide DEF_pipeline_fft_fft_stage_data_1_99_BITS_447_TO_4_ETC___d844;
  tUWide DEF_pipeline_fft_fft_stage_data_1_99_BITS_447_TO_4_ETC___d838;
  tUWide DEF_IF_pipeline_chunker_index_4_EQ_7_5_THEN_pipeli_ETC___d121;
  tUWide DEF_IF_pipeline_chunker_index_4_EQ_7_5_THEN_pipeli_ETC___d114;
  tUWide DEF_pipeline_fft_fft_stage_data_0_55_BITS_447_TO_4_ETC___d498;
  tUWide DEF_pipeline_fft_fft_stage_data_0_55_BITS_447_TO_4_ETC___d492;
  tUWide DEF_pipeline_fft_fft_outputFIFO_first__525_BITS_51_ETC___d2531;
  tUWide DEF_pipeline_chunker_outfifo_first__509_BITS_511_T_ETC___d2515;
  tUWide DEF_pipeline_ifft_fft_fft_outputFIFO_first__410_BI_ETC___d2429;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_2_987_BITS_44_ETC___d2393;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_1_641_BITS_44_ETC___d1974;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_0_297_BITS_44_ETC___d1628;
  tUWide DEF_pipeline_fft_fft_stage_data_2_45_BITS_447_TO_4_ETC___d1251;
  tUWide DEF_pipeline_fft_fft_stage_data_1_99_BITS_447_TO_4_ETC___d832;
  tUWide DEF_IF_pipeline_chunker_index_4_EQ_7_5_THEN_pipeli_ETC___d107;
  tUWide DEF_pipeline_fft_fft_stage_data_0_55_BITS_447_TO_4_ETC___d486;
  tUWide DEF_pipeline_fft_fft_outputFIFO_first__525_BITS_51_ETC___d2528;
  tUWide DEF_pipeline_chunker_outfifo_first__509_BITS_511_T_ETC___d2512;
  tUWide DEF_pipeline_ifft_fft_fft_outputFIFO_first__410_BI_ETC___d2419;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_2_987_BITS_44_ETC___d2155;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_1_641_BITS_44_ETC___d1808;
  tUWide DEF_pipeline_ifft_fft_fft_stage_data_0_297_BITS_44_ETC___d1462;
  tUWide DEF_pipeline_fft_fft_stage_data_2_45_BITS_447_TO_4_ETC___d1013;
  tUWide DEF_pipeline_fft_fft_stage_data_1_99_BITS_447_TO_4_ETC___d666;
  tUWide DEF_IF_pipeline_chunker_index_4_EQ_7_5_THEN_pipeli_ETC___d100;
  tUWide DEF_pipeline_fft_fft_stage_data_0_55_BITS_447_TO_4_ETC___d320;
 
 /* Rules */
 public:
  void RL_pipeline_fir_mult();
  void RL_pipeline_fir_add();
  void RL_pipeline_chunker_iterate();
  void RL_pipeline_fft_fft_linear_fft();
  void RL_pipeline_ifft_fft_fft_linear_fft();
  void RL_pipeline_ifft_inversify();
  void RL_pipeline_splitter_iterate();
  void RL_pipeline_fir_to_chunker();
  void RL_pipeline_chunker_to_fft();
  void RL_pipeline_fft_to_ifft();
  void RL_pipeline_ifft_to_splitter();
  void RL_init();
  void RL_read();
  void RL_pad();
  void RL_write();
  void RL_finish();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestDriver &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTestDriver &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTestDriver &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestDriver &backing);
};

#endif /* ifndef __mkTestDriver_h__ */
